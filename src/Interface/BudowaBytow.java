package Interface;

import org.apache.jena.ontology.ObjectProperty;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntModel;



public class BudowaBytow {

	public OntClass Byt;
	public OntClass BytBazowy;
	public OntClass BytSchematyczny;
	
	BudowaBytow(OntModel model, String MyUri)
	{
		// Byty
		Byt = model.createClass(MyUri + "#Byt");
		BytBazowy = model.createClass(MyUri + "#BytBazowy");
		BytSchematyczny = model.createClass(MyUri + "#BytSchematyczny");
		Byt.addSubClass(BytBazowy);
		Byt.addSubClass(BytSchematyczny);
		
		// dodawanie naglowkow
		Byt.addLabel("Byt", "pl");
		Byt.addLabel("Entity", "en");
		BytBazowy.addLabel("Byt bazowy", "pl");
		BytBazowy.addLabel("Ground entity", "en");
		BytSchematyczny.addLabel("Byt schematyczny", "pl");
		BytSchematyczny.addLabel("Schematic entity", "en");
		
		
		OntClass AgentFizyczny = model.createClass(MyUri + "#AgentFizyczny");
		OntClass Dzialanie =  model.createClass(MyUri + "#Dzialanie");
		OntClass Jakosc =  model.createClass(MyUri + "#Jakosc");
		OntClass Obiekt =  model.createClass(MyUri + "#Obiekt");
		OntClass ObszarPrzestrzeni =  model.createClass(MyUri + "#ObszarPrzestrzeni");
		OntClass PrzedzialCzasowy =  model.createClass(MyUri + "#PrzedzialCzasowy");
		OntClass RealizacjaInformacji =  model.createClass(MyUri + "#RelizacjaInformacji");
		OntClass ReprezentacjaWewnetrzna =  model.createClass(MyUri + "#ReprezentacjaWewnetrzna");
		OntClass Stan =  model.createClass(MyUri + "#Stan");
		OntClass Substancja =  model.createClass(MyUri + "#Substancja");
		OntClass Zdarzenie =  model.createClass(MyUri + "#Zdarzenie");
		
		AgentFizyczny.addLabel("Agent Fizyczny", "pl");
		AgentFizyczny.addLabel("Physical Agent", "en");
		Dzialanie.addLabel("Dzialanie", "pl");
		Dzialanie.addLabel("Action Accomplishment (Dolce), Culminated Process (OntoSTIT+, R. Trypuz", "en");
		Jakosc.addLabel("Jakosc", "pl");
		Jakosc.addLabel("Quality", "en");
		Obiekt.addLabel("Obiekt", "pl");
		Obiekt.addLabel("Object", "en");
		ObszarPrzestrzeni.addLabel("Obszar Przestrzeni", "pl");
		ObszarPrzestrzeni.addLabel("Space region", "en");
		PrzedzialCzasowy.addLabel("Przedzial czasowy", "pl");
		PrzedzialCzasowy.addLabel("Time interval", "en");
		RealizacjaInformacji.addLabel("Realizacja informacji", "pl");
		RealizacjaInformacji.addLabel("Information realization", "en");
		ReprezentacjaWewnetrzna.addLabel("Reprezentacja wewnetrzna", "pl");
		ReprezentacjaWewnetrzna.addLabel("Internal representation", "en");
		Stan.addLabel("Stan", "pl");
		Stan.addLabel("State", "en");
		Substancja.addLabel("Substancja", "pl");
		Substancja.addLabel("Substance", "en");
		Zdarzenie.addLabel("Zdarzenie", "pl");
		Zdarzenie.addLabel("Event, Achievement (DOLCE)", "en");
		
		
		BytBazowy.addSubClass(AgentFizyczny);
		BytBazowy.addSubClass(Dzialanie);
		BytBazowy.addSubClass(Jakosc);
		BytBazowy.addSubClass(Obiekt);
		BytBazowy.addSubClass(ObszarPrzestrzeni);
		BytBazowy.addSubClass(PrzedzialCzasowy);
		BytBazowy.addSubClass(RealizacjaInformacji);
		BytBazowy.addSubClass(ReprezentacjaWewnetrzna);
		BytBazowy.addSubClass(Stan);
		BytBazowy.addSubClass(Substancja);
		BytBazowy.addSubClass(Zdarzenie);
		
		OntClass AgentSpoleczny =  model.createClass(MyUri + "#AgentSpoleczny");
		OntClass Deskrypcja =  model.createClass(MyUri + "#Deskrypcja");
		OntClass ObiektInformacyjny =  model.createClass(MyUri + "#ObiektInformacyjny");
		OntClass Pojecie =  model.createClass(MyUri + "#Pojecie");
		OntClass Sytuacja =  model.createClass(MyUri + "#Sytuacja");
		OntClass Zbior =  model.createClass(MyUri + "#Zbior");
		
		AgentSpoleczny.addLabel("Agent Spoleczny", "pl");
		AgentSpoleczny.addLabel("Social Agent", "en");
		Deskrypcja.addLabel("Deskrypcja", "pl");
		Deskrypcja.addLabel("Description", "en");
		ObiektInformacyjny.addLabel("ObiektInformacyjny", "pl");
		ObiektInformacyjny.addLabel("Information object", "en");
		Pojecie.addLabel("Pojecie", "pl");
		Pojecie.addLabel("Concept", "en");
		Sytuacja.addLabel("Sytuacja", "pl");
		Sytuacja.addLabel("Situation", "en");
		Zbior.addLabel("Zbior", "pl");
		Zbior.addLabel("Collection", "en");
		
		BytSchematyczny.addSubClass(AgentSpoleczny);
		BytSchematyczny.addSubClass(Deskrypcja);
		BytSchematyczny.addSubClass(ObiektInformacyjny);
		BytSchematyczny.addSubClass(Pojecie);
		BytSchematyczny.addSubClass(Sytuacja);
		BytSchematyczny.addSubClass(Zbior);
		
		//uzupelnianie AgentSpoleczny
		OntClass Organizacja =  model.createClass(MyUri + "#Organizacja");
		AgentSpoleczny.addSubClass(Organizacja);
		Organizacja.addLabel("Organizacja", "pl");
		Organizacja.addLabel("Organization", "en");
		
		//uzupelnienie Deskrypcja
		OntClass DeskrypcjaKnstytutuujaca =  model.createClass(MyUri + "#DeskrypcjaKonstytuujaca");
		OntClass Norma =  model.createClass(MyUri + "#Norma");
		OntClass Plan =  model.createClass(MyUri + "#Plan");
		OntClass Pragnienie =  model.createClass(MyUri + "#Pragnienie");
		OntClass Wiazka =  model.createClass(MyUri + "#Wiazka");
			OntClass Cel =  model.createClass(MyUri + "#Cel");
			OntClass Paradygmat =  model.createClass(MyUri + "#Paradygmat");
			OntClass WiazkaPlanowINorm =  model.createClass(MyUri + "#WiazkaPlanowINorm");
				OntClass WplywPoznawczy =  model.createClass(MyUri + "#WplywPoznawczy");
					OntClass RelacjaSpoleczna =  model.createClass(MyUri + "#RelacjaSpoleczna");
		
		Deskrypcja.addSubClass(DeskrypcjaKnstytutuujaca);
		Deskrypcja.addSubClass(Norma);
		Deskrypcja.addSubClass(Plan);
		Deskrypcja.addSubClass(Pragnienie);
			Pragnienie.addSubClass(Cel);
		Deskrypcja.addSubClass(Wiazka);
			Wiazka.addSubClass(Paradygmat);
			Wiazka.addSubClass(WiazkaPlanowINorm);
				WiazkaPlanowINorm.addSubClass(WplywPoznawczy);
					WplywPoznawczy.addSubClass(RelacjaSpoleczna);
					
		DeskrypcjaKnstytutuujaca.addLabel("Deskrypcja konsrytuujaca", "pl");
		DeskrypcjaKnstytutuujaca.addLabel("Constitutive description", "en");
		Norma.addLabel("Norma", "pl");
		Norma.addLabel("Norm", "en");
		Plan.addLabel("Plan", "pl");
		Plan.addLabel("Plan", "en");
		Pragnienie.addLabel("Pragnienie", "pl");
		Pragnienie.addLabel("Desire", "en");
			Cel.addLabel("Cel", "pl");
			Cel.addLabel("Goal", "en");
		Wiazka.addLabel("Wiazka", "pl");
		Wiazka.addLabel("Bundle", "en");
			Paradygmat.addLabel("Paradygmat", "pl");
			Paradygmat.addLabel("Paradigmat", "en");
			WiazkaPlanowINorm.addLabel("Wiazka Planow i Norm", "pl");
			WiazkaPlanowINorm.addLabel("Norm and plan bundle", "en");
				WplywPoznawczy.addLabel("Wplyw poznawczy", "pl");
				WplywPoznawczy.addLabel("Epistemic influence", "en");
					RelacjaSpoleczna.addLabel("Relacja spoleczna", "pl");
					RelacjaSpoleczna.addLabel("Social relation", "en");
			
					
		//uzupelnienie Pojecie
		OntClass OpisStanu = model.createClass(MyUri + "#OpisStanu");
		OntClass Parametr = model.createClass(MyUri + "#Parametr");
		OntClass Rola = model.createClass(MyUri + "#Rola");
			OntClass RolaAblatywna = model.createClass(MyUri + "#RolaAblatywna");
			OntClass RolaAdlatywna = model.createClass(MyUri + "#RolaAdlatywna");
			OntClass RolaAgentywna = model.createClass(MyUri + "#RolaAgentywna");
			OntClass RolaInstrumentalna = model.createClass(MyUri + "#RolaInstrumentalna");
			OntClass RolaLokacyjna = model.createClass(MyUri + "#RolaLokacyjna");
			OntClass RolaPacjensywna = model.createClass(MyUri + "#RolaPacjensywna");
				OntClass RolaPacjensaBeneficjenta = model.createClass(MyUri + "#RolaPacjensa-Beneficjenta");
				OntClass RolaPacjensaObiektu = model.createClass(MyUri + "#RolaPacjensa-Obiektu");
			OntClass RolaPerlatywna = model.createClass(MyUri + "#RolaPerlatywna");
			OntClass RolaReifikujaca = model.createClass(MyUri + "#RolaReifikujaca");
			OntClass RolaSposobuWykonania = model.createClass(MyUri + "#RolaSposobuWykonania");
			OntClass RolaWiedzy = model.createClass(MyUri + "#RolaWiedzy");
			OntClass RolaWynikowa = model.createClass(MyUri + "#RolaWynikowa");
				OntClass SkutekKonczonyWykonaniemZadania = model.createClass(MyUri + "#SkutekKonczonyWykonaniemZadania");
				OntClass SkutekRozpoczynanyWykonaniemZadania = model.createClass(MyUri + "#SkutekRozpoczynanyWykonaniemZadania");		
		OntClass Zadanie = model.createClass(MyUri + "#Zadanie");
		
		Pojecie.addSubClass(OpisStanu);
		Pojecie.addSubClass(Parametr);
		Pojecie.addSubClass(Rola);
			Rola.addSubClass(RolaAblatywna);
			Rola.addSubClass(RolaAdlatywna);
			Rola.addSubClass(RolaAgentywna);
			Rola.addSubClass(RolaInstrumentalna);
			Rola.addSubClass(RolaLokacyjna);
			Rola.addSubClass(RolaPacjensywna);
				RolaPacjensywna.addSubClass(RolaPacjensaBeneficjenta);
				RolaPacjensywna.addSubClass(RolaPacjensaObiektu);
			Rola.addSubClass(RolaPerlatywna);
			Rola.addSubClass(RolaReifikujaca);
			Rola.addSubClass(RolaSposobuWykonania);
			Rola.addSubClass(RolaWiedzy);
			Rola.addSubClass(RolaWynikowa);
				RolaWynikowa.addSubClass(SkutekKonczonyWykonaniemZadania);
				RolaWynikowa.addSubClass(SkutekRozpoczynanyWykonaniemZadania);
		Pojecie.addSubClass(Zadanie);
		
		OpisStanu.addLabel("Opis stanu", "pl");
		OpisStanu.addLabel("State description", "en");
		Parametr.addLabel("Parameter", "pl");
		Parametr.addLabel("Parametr", "en");
		Rola.addLabel("Rola", "pl");
		Rola.addLabel("Role", "en");
			RolaAblatywna.addLabel("Rola ablatywna", "pl");
			RolaAblatywna.addLabel("Ablative role", "en");
			RolaAdlatywna.addLabel("Rola adlatywna", "pl");
			RolaAdlatywna.addLabel("Adlative role", "en");
			RolaAgentywna.addLabel("Rola agentywna", "pl");
			RolaAgentywna.addLabel("Agentive role", "en");
			RolaInstrumentalna.addLabel("Rola instrumentalna", "pl");
			RolaInstrumentalna.addLabel("Instrumental role", "en");
			RolaLokacyjna.addLabel("Rola lokacyjna", "pl");
			RolaLokacyjna.addLabel("Locative role", "en");
			RolaPacjensywna.addLabel("Rola pacjensywna", "pl");
			RolaPacjensywna.addLabel("Patient role", "en");
				RolaPacjensaBeneficjenta.addLabel("Rola pacjensa-beneficenta", "pl");
				RolaPacjensaBeneficjenta.addLabel("Patient-beneficiary role", "en");
				RolaPacjensaObiektu.addLabel("Rola pacjensa-obiektu", "pl");
				RolaPacjensaObiektu.addLabel("Patient-object/theme role", "en");
			RolaPerlatywna.addLabel("Rola perlatywna", "pl");
			RolaPerlatywna.addLabel("Perlative role", "en");
			RolaReifikujaca.addLabel("Rola reifikujaca", "pl");
			RolaReifikujaca.addLabel("Reifying role", "en");
			RolaSposobuWykonania.addLabel("Rola sposobu wykonania", "pl");
			RolaSposobuWykonania.addLabel("Manner role", "en");
			RolaWiedzy.addLabel("Rola wiedzy", "pl");
			RolaWiedzy.addLabel("Knowledge role", "en");
			RolaWynikowa.addLabel("Rola wynikowa", "pl");
			RolaWynikowa.addLabel("Resulting role", "en");
				SkutekKonczonyWykonaniemZadania.addLabel("Skutek konczony wykonaniem zadania", "pl");
				SkutekKonczonyWykonaniemZadania.addLabel("Terminated result of a task execution", "en");
				SkutekRozpoczynanyWykonaniemZadania.addLabel("Skutek rozpoczynany wykonaniem zadania", "pl");
				SkutekRozpoczynanyWykonaniemZadania.addLabel("Initiated result of an execution of a task", "en");
		Zadanie.addLabel("Zadanie", "pl");
		Zadanie.addLabel("Task", "en");
		
		//uzupelnienie Sytuacja
		OntClass AplikacjaNormy = model.createClass(MyUri + "#AplikacjaNormy");
		OntClass SytucjaSpelniajacaCel = model.createClass(MyUri + "#SytuacjaSpelniajacaCel");
		OntClass WykonaniePlanu = model.createClass(MyUri + "#WykonaniePlanu");
		
		Sytuacja.addSubClass(AplikacjaNormy);
		Sytuacja.addSubClass(SytucjaSpelniajacaCel);
		Sytuacja.addSubClass(WykonaniePlanu);
		
		AplikacjaNormy.addLabel("Aplikacja normy", "pl");
		AplikacjaNormy.addLabel("Norm application", "en");
		SytucjaSpelniajacaCel.addLabel("Sytuacja spelniajaca cel", "pl");
		SytucjaSpelniajacaCel.addLabel("Goal situation", "en");
		WykonaniePlanu.addLabel("Wykonanie planu", "pl");
		WykonaniePlanu.addLabel("Plan execution", "en");
		
		//uzupelnienie Zbior
		OntClass Konfiguracja = model.createClass(MyUri + "#Konfiguracja");
		OntClass ZbiorAgentow = model.createClass(MyUri + "#ZbiorAgentow");
			OntClass WspolnotaWiedzy = model.createClass(MyUri + "#WspolnotaWiedzy");
				OntClass KolektywIntencjonalny = model.createClass(MyUri + "#KolektywIntencjonalny");
				OntClass KolektywWiedzy = model.createClass(MyUri + "#KolektywWiedzy");
				OntClass NormatywnyKolektywIntencjonalny = model.createClass(MyUri + "#NormatywnyKolektywIntencjonalny");
		Zbior.addSubClass(Konfiguracja);
		Zbior.addSubClass(ZbiorAgentow);
			ZbiorAgentow.addSubClass(WspolnotaWiedzy);
				WspolnotaWiedzy.addSubClass(KolektywIntencjonalny);
				WspolnotaWiedzy.addSubClass(KolektywWiedzy);
				WspolnotaWiedzy.addSubClass(NormatywnyKolektywIntencjonalny);
					NormatywnyKolektywIntencjonalny.addSubClass(KolektywWiedzy);
					
		Konfiguracja.addLabel("Konfiguracja", "pl");
		Konfiguracja.addLabel("Configuration", "en");
		ZbiorAgentow.addLabel("Zbior agentow", "pl");
		ZbiorAgentow.addLabel("Agent collection", "en");
			WspolnotaWiedzy.addLabel("Wspolnota wiedzy", "pl");
			WspolnotaWiedzy.addLabel("Knowledge community", "en");
				KolektywIntencjonalny.addLabel("Kolektyw intercjonalny", "pl");
				KolektywIntencjonalny.addLabel("Intentional collective ", "en");
				KolektywWiedzy.addLabel("Kolektyw wiedzy", "pl");
				KolektywWiedzy.addLabel("Knowledge collective", "en");
				NormatywnyKolektywIntencjonalny.addLabel("Normatywny kolektyw intencjonalny", "pl");
				NormatywnyKolektywIntencjonalny.addLabel("Normative intentional collective", "en");
				
				//relacje
		ObjectProperty charakteryzuje = model.createObjectProperty(MyUri + "#charakteryzuje");
		ObjectProperty definiuje = model.createObjectProperty(MyUri + "#definiuje");
		ObjectProperty deleguje = model.createObjectProperty(MyUri + "#deleguje");
		ObjectProperty dzialaNaRzecz = model.createObjectProperty(MyUri + "#dzialaNaRzecz");
		ObjectProperty dzialaPoprzez = model.createObjectProperty(MyUri + "#dzialaPoprzez");
		ObjectProperty interpretuje = model.createObjectProperty(MyUri + "#interpretuje");
		ObjectProperty jednoczy = model.createObjectProperty(MyUri + "#jednoczy");
		ObjectProperty jestBeneficjentemDzialania = model.createObjectProperty(MyUri + "#jestBeneficjentemDzialania");
		ObjectProperty jestCelemDzialania = model.createObjectProperty(MyUri + "#jestCelemDzialania");
			ObjectProperty maJakoAgensa = model.createObjectProperty(MyUri + "#maJakoAgensa");
			jestCelemDzialania.addSubProperty(maJakoAgensa);
		ObjectProperty jestCharakteryzowanyPrzez = model.createObjectProperty(MyUri + "#jestCharakteryzowanyPrzez");
		ObjectProperty jestCzesciaWlasciwa = model.createObjectProperty(MyUri + "#jestCzesciaWlasciwa");
			ObjectProperty jestGlownymCelem = model.createObjectProperty(MyUri + "#jestGlownymCelem");
			ObjectProperty jestPodrzednymCelem = model.createObjectProperty(MyUri + "#jestPodrzednymCelem");
			ObjectProperty jestPodrzednymPlanem = model.createObjectProperty(MyUri + "#jestPodrzednymPlanem");
			jestCzesciaWlasciwa.addSubProperty(jestGlownymCelem);
			jestCzesciaWlasciwa.addSubProperty(jestPodrzednymCelem);
			jestCzesciaWlasciwa.addSubProperty(jestPodrzednymPlanem);
		ObjectProperty jestCzlonkiem = model.createObjectProperty(MyUri + "#jestCzlonkiem");
		ObjectProperty jestDelegowanePrzez = model.createObjectProperty(MyUri + "#jestDelegowanePrzez");
		ObjectProperty jestInstrumentemWDzialaniu = model.createObjectProperty(MyUri + "#jestInstrumentemWDzialaniu");
		ObjectProperty jestInterpretowanyPrzez = model.createObjectProperty(MyUri + "#jestInterpretowanyPrzez");
		ObjectProperty jestKlasyfikowanyPrzez = model.createObjectProperty(MyUri + "#jestKlasyfikowanyPrzez");
		ObjectProperty jestLokalizacjaDzialania = model.createObjectProperty(MyUri + "#jestLokalizacjaDzialania");
		ObjectProperty jestNormaOpisujaca = model.createObjectProperty(MyUri + "#jestNormaOpisujaca");
		ObjectProperty jestObiektemDzialania = model.createObjectProperty(MyUri + "#jestObiektemDzialania");
		ObjectProperty jestPodzielanaPrzez = model.createObjectProperty(MyUri + "#jestPodzielanaPrzez");
			ObjectProperty jestPrzyjmowanaPrzez = model.createObjectProperty(MyUri + "#jestPrzyjmowanaPrzez");
			jestPodzielanaPrzez.addSubProperty(jestPrzyjmowanaPrzez);
				ObjectProperty jestCelemPrzyjmowanymPrzez = model.createObjectProperty(MyUri + "#jestCelemPrzyjmowanymPrzez");
				ObjectProperty jestPlanemPrzyjmowanymPrzez = model.createObjectProperty(MyUri + "#jestPlanemPrzyjmowanymPrzez");
				jestPrzyjmowanaPrzez.addSubProperty(jestCelemPrzyjmowanymPrzez);
				jestPodzielanaPrzez.addSubProperty(jestPlanemPrzyjmowanymPrzez);
		ObjectProperty jestPojeciowoPokrywanyPrzez = model.createObjectProperty(MyUri + "#jestPojeciowoPokrywanyPrzez");
		ObjectProperty jestPonownieOpisywanaPrzez = model.createObjectProperty(MyUri + "#jestPonownieOpisywanaPrzez");
		ObjectProperty jestRealizowanyPrzez = model.createObjectProperty(MyUri + "#jestRealizowanyPrzez");
		ObjectProperty jestSpecjalizowanyPrzez = model.createObjectProperty(MyUri + "#jestSpecjalizowanyPrzez");
		ObjectProperty jestSpelnionaPrzez = model.createObjectProperty(MyUri + "#jestSpelnionaPrzez");
			ObjectProperty jestStosowanaDo = model.createObjectProperty(MyUri + "#jestStosowanaDo");
			jestSpelnionaPrzez.addSubProperty(jestStosowanaDo);
		ObjectProperty jestSposobemDzialania = model.createObjectProperty(MyUri + "#jestSposobemDzialania");
		ObjectProperty jestTworzonaPrzez = model.createObjectProperty(MyUri + "#jestTworzonaPrzez");
		ObjectProperty jestTworzonaPrzezIndywiduumJako = model.createObjectProperty(MyUri + "#jestTworzonaPrzezIndywiduumJako");
		ObjectProperty jestUogolniajacoZjednoczonyPrzez = model.createObjectProperty(MyUri + "#jestUogolniajacoZjednoczonyPrzez");
		ObjectProperty jestUstanawianaPrzez = model.createObjectProperty(MyUri + "#jestUstanawianaPrzez");
		ObjectProperty jestWprowadzonyPrzez = model.createObjectProperty(MyUri + "#jestWprowadzonyPrzez");
		ObjectProperty jestWykorzystaneW = model.createObjectProperty(MyUri + "#jestWykorzystaneW");
		ObjectProperty jestWynikiemDzialania = model.createObjectProperty(MyUri + "#jestWynikiemDzialania");
			ObjectProperty jestSkutkiemKonczonym = model.createObjectProperty(MyUri + "#jestSkutkiemKonczonym");
			ObjectProperty jestSkutkiemRozpoczynanym = model.createObjectProperty(MyUri + "#jestSkutkiemRozpoczynanym");
			jestWynikiemDzialania.addSubProperty(jestSkutkiemRozpoczynanym);
			jestWynikiemDzialania.addSubProperty(jestSkutkiemKonczonym);
		ObjectProperty jestWyrazonaPrzez = model.createObjectProperty(MyUri + "#jestWyrazonaPrzez");
		ObjectProperty jestZawartyWZakresie = model.createObjectProperty(MyUri + "#jestZawartyWZakresie");
		ObjectProperty jestZdefiniowaneW = model.createObjectProperty(MyUri + "#jestZdefiniowaneW");
		ObjectProperty jestZjednoczonyPrzez = model.createObjectProperty(MyUri + "#jestZjednoczonyPrzez");
		ObjectProperty jestZreifikowanaCzynnoscia = model.createObjectProperty(MyUri + "#jestZreifikowanaCzynnoscia");
		ObjectProperty klasyfikuje = model.createObjectProperty(MyUri + "#klasyfikuje");
		ObjectProperty maJakoBeneficjenta = model.createObjectProperty(MyUri + "#maJakoBeneficjenta");
		ObjectProperty maJakoCelDzialania = model.createObjectProperty(MyUri + "#maJakoCelDzialania");
			ObjectProperty jestAgensem = model.createObjectProperty(MyUri + "#jestAgensem");
			maJakoCelDzialania.addSubProperty(jestAgensem);
		ObjectProperty maJakoCzescWlasciwa = model.createObjectProperty(MyUri + "#maJakoCzescWlasciwa");
			ObjectProperty maJakoGlownyCel = model.createObjectProperty(MyUri + "#maJakoGlownyCel");
			ObjectProperty maJakoPodrzednyCel = model.createObjectProperty(MyUri + "#maJakoPodrzednyCel");
			ObjectProperty maPodrzednyPlan = model.createObjectProperty(MyUri + "#maPodrzednyPlan");
			maJakoCzescWlasciwa.addSubProperty(maJakoGlownyCel);
			maJakoCzescWlasciwa.addSubProperty(maJakoPodrzednyCel);
			maJakoCzescWlasciwa.addSubProperty(maPodrzednyPlan);
		ObjectProperty maJakoCzlonka = model.createObjectProperty(MyUri + "#maJakoCzlonka");
		ObjectProperty maJakoInstrumentDzialania = model.createObjectProperty(MyUri + "#maJakoInstrumentDzialania");
		ObjectProperty maJakoLokalizacjeDzialania = model.createObjectProperty(MyUri + "#maJakoLokalizacjeDzialania");
		ObjectProperty maJakoObiektDzialania = model.createObjectProperty(MyUri + "#maJakoObiektDzialania");
		ObjectProperty maJakoOkreslenieKierunkuDokad = model.createObjectProperty(MyUri + "#maJakoOkreslenieKierunkuDokad");
		ObjectProperty maJakoOkreslenieKierunkuSkad = model.createObjectProperty(MyUri + "#maJakoOkreslenieKierunkuSkad");
		ObjectProperty maJakoOkresleniePrzejscia = model.createObjectProperty(MyUri + "#maJakoOkresleniePrzejscia");
		ObjectProperty maJakoSposobDzialania = model.createObjectProperty(MyUri + "#maJakoSposobDzialania");
		ObjectProperty maJakoWynikDzialania = model.createObjectProperty(MyUri + "#maJakoWynikDzialania");
			ObjectProperty maJakoSkutekKonczony = model.createObjectProperty(MyUri + "#maJakoSkutekKonczony");
			ObjectProperty maJakoSkutekRozpoczynany = model.createObjectProperty(MyUri + "#maJakoSkutekRozpoczynany");
			maJakoWynikDzialania.addSubProperty(maJakoSkutekRozpoczynany);
			maJakoWynikDzialania.addSubProperty(maJakoSkutekKonczony);
		ObjectProperty maJakoZreifikowanaCzynnosc = model.createObjectProperty(MyUri + "#maJakoZreifikowanaCzynnosc");
		ObjectProperty maPredyspozycjeDo = model.createObjectProperty(MyUri + "#maPredyspozycjeDo");
		ObjectProperty okreslaKierunekDokad = model.createObjectProperty(MyUri + "#okreslaKierunekDokad");
		ObjectProperty okreslaKierunekSkad = model.createObjectProperty(MyUri + "#okreslaKierunekSkad");
		ObjectProperty okreslaPrzejscie = model.createObjectProperty(MyUri + "#okreslaPrzejscie");
		ObjectProperty podlegaWplywowi = model.createObjectProperty(MyUri + "#podlegaWplywowi");
		ObjectProperty podpadaPod = model.createObjectProperty(MyUri + "#podpadaPod");
		ObjectProperty podziela = model.createObjectProperty(MyUri + "#podziela");
			ObjectProperty przyjmuje = model.createObjectProperty(MyUri + "#przyjmuje");
			podziela.addSubProperty(przyjmuje);
				ObjectProperty przyjmujeCel = model.createObjectProperty(MyUri + "#przyjmujeCel");
				ObjectProperty przyjmujePlan = model.createObjectProperty(MyUri + "#przyjmujePlan");
				przyjmuje.addSubProperty(przyjmujePlan);
				przyjmuje.addSubProperty(przyjmujeCel);
		ObjectProperty pojeciowoPokrywa = model.createObjectProperty(MyUri + "#pojeciowoPokrywa");
		ObjectProperty ponownieOpisuje = model.createObjectProperty(MyUri + "#ponownieOpisuje");
		ObjectProperty posiadaWZakresie = model.createObjectProperty(MyUri + "#posiadaWZakresie");
		ObjectProperty powodujeZaistnienie = model.createObjectProperty(MyUri + "#powodujeZaistnienie");
		ObjectProperty pozostajeWZakresie = model.createObjectProperty(MyUri + "#pozostajeWZakresie");
		ObjectProperty realizuje = model.createObjectProperty(MyUri + "#realizuje");
		ObjectProperty specjalizuje = model.createObjectProperty(MyUri + "#specjalizuje");
		ObjectProperty spelnia = model.createObjectProperty(MyUri + "#spelnia");
			ObjectProperty jestZastosowaniem = model.createObjectProperty(MyUri + "#jestZastosowaniem");
			spelnia.addSubProperty(jestZastosowaniem);
		ObjectProperty stanowiUtworzonaPrzezIndywiduum = model.createObjectProperty(MyUri + "#stanowiUtworzonaPrzezIndywiduum");
		ObjectProperty traktujeO = model.createObjectProperty(MyUri + "#traktujeO");
		ObjectProperty tworzy = model.createObjectProperty(MyUri + "#tworzy");
		ObjectProperty uogolniajacoJednoczy = model.createObjectProperty(MyUri + "#uogolniajacoJednoczy");
		ObjectProperty ustanawia = model.createObjectProperty(MyUri + "#ustanawia");
		ObjectProperty wplywaNa = model.createObjectProperty(MyUri + "#wplywaNa");
		ObjectProperty wprowadza = model.createObjectProperty(MyUri + "#wprowadza");
		ObjectProperty wykorzystuje = model.createObjectProperty(MyUri + "#wykorzystuje");
		ObjectProperty wyraza = model.createObjectProperty(MyUri + "#wyraza");
		ObjectProperty zaistnialZPowodu = model.createObjectProperty(MyUri + "#zaistanialZPowodu");
		ObjectProperty zawieraWZakresie = model.createObjectProperty(MyUri + "#zawieraWZakresie");
		ObjectProperty znajdujeOdniesienieW = model.createObjectProperty(MyUri + "#znajdujeOdniesienieW");


		// polaczenie relacja
		BytBazowy.addSuperClass(model.createSomeValuesFromRestriction(null, jestKlasyfikowanyPrzez, Pojecie));
		BytBazowy.addSuperClass(model.createSomeValuesFromRestriction(null, ustanawia, Sytuacja));
		Stan.addSuperClass(model.createSomeValuesFromRestriction(null, jestKlasyfikowanyPrzez,  OpisStanu));
		AgentSpoleczny.addSuperClass(model.createSomeValuesFromRestriction(null, dzialaPoprzez,  Byt));	
		AgentSpoleczny.addSuperClass(model.createSomeValuesFromRestriction(null, jestWprowadzonyPrzez,  Deskrypcja));
		Deskrypcja.addSuperClass(model.createSomeValuesFromRestriction(null, jestPodzielanaPrzez,  AgentSpoleczny));
		Deskrypcja.addSuperClass(model.createSomeValuesFromRestriction(null, jestWyrazonaPrzez,  ObiektInformacyjny));
		Pojecie.addSuperClass(model.createSomeValuesFromRestriction(null, jestZdefiniowaneW,  Deskrypcja));
		Sytuacja.addSuperClass(model.createSomeValuesFromRestriction(null, spelnia,  Deskrypcja));
		Zbior.addSuperClass(model.createSomeValuesFromRestriction(null, jestPojeciowoPokrywanyPrzez,  Pojecie));
		Zbior.addSuperClass(model.createSomeValuesFromRestriction(null, jestZjednoczonyPrzez,  Deskrypcja));
		Plan.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoCzescWlasciwa,  Cel));
		Plan.addSuperClass(model.createSomeValuesFromRestriction(null, wykorzystuje,  Rola));
		Plan.addSuperClass(model.createSomeValuesFromRestriction(null, wykorzystuje,  Zadanie));
		Wiazka.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoCzescWlasciwa,  Deskrypcja));
		WiazkaPlanowINorm.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoCzescWlasciwa,  Norma));
		WiazkaPlanowINorm.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoCzescWlasciwa,  Plan));
		WplywPoznawczy.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoCzescWlasciwa,  Paradygmat));
		OpisStanu.addSuperClass(model.createSomeValuesFromRestriction(null, klasyfikuje, Stan));
		RolaAblatywna.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaAblatywna.addSuperClass(model.createSomeValuesFromRestriction(null, okreslaKierunekSkad, Zadanie));
		RolaAdlatywna.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaAdlatywna.addSuperClass(model.createSomeValuesFromRestriction(null, okreslaKierunekDokad, Zadanie));
		RolaAgentywna.addSuperClass(model.createSomeValuesFromRestriction(null, jestAgensem, Zadanie));
		RolaInstrumentalna.addSuperClass(model.createSomeValuesFromRestriction(null, jestInstrumentemWDzialaniu, Zadanie));
		RolaInstrumentalna.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaLokacyjna.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaLokacyjna.addSuperClass(model.createSomeValuesFromRestriction(null, jestLokalizacjaDzialania, Zadanie));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoLokalizacjeDzialania, RolaLokacyjna));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, jestCelemDzialania, RolaAgentywna));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoBeneficjenta, RolaPacjensaBeneficjenta));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoObiektDzialania, RolaPacjensaObiektu));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoOkreslenieKierunkuDokad, RolaAdlatywna));
		Zadanie.addSuperClass(model.createSomeValuesFromRestriction(null, maJakoOkreslenieKierunkuSkad, RolaAblatywna));
		RolaPacjensaBeneficjenta.addSuperClass(model.createSomeValuesFromRestriction(null, jestBeneficjentemDzialania, Zadanie));
		RolaPacjensaBeneficjenta.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaPacjensaObiektu.addSuperClass(model.createSomeValuesFromRestriction(null, jestObiektemDzialania, Zadanie));
		RolaPacjensaObiektu.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaPerlatywna.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaPerlatywna.addSuperClass(model.createSomeValuesFromRestriction(null, okreslaPrzejscie, Zadanie));
		RolaReifikujaca.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaReifikujaca.addSuperClass(model.createSomeValuesFromRestriction(null, jestZreifikowanaCzynnoscia, Zadanie));
		RolaReifikujaca.addSuperClass(model.createSomeValuesFromRestriction(null, klasyfikuje, Zadanie));
		RolaSposobuWykonania.addSuperClass(model.createSomeValuesFromRestriction(null, jestSposobemDzialania, Zadanie));
		RolaSposobuWykonania.addSuperClass(model.createSomeValuesFromRestriction(null, jestWykorzystaneW, Plan));
		RolaWynikowa.addSuperClass(model.createSomeValuesFromRestriction(null, jestWynikiemDzialania, Zadanie));
		RolaWynikowa.addSuperClass(model.createSomeValuesFromRestriction(null, jestZdefiniowaneW, Plan));
		AgentSpoleczny.addSuperClass(model.createSomeValuesFromRestriction(null, podziela, Deskrypcja));

		//InverseOf
		charakteryzuje.setInverseOf(jestCharakteryzowanyPrzez);
		definiuje.setInverseOf(jestZdefiniowaneW);
		deleguje.setInverseOf(jestDelegowanePrzez);
		dzialaNaRzecz.setInverseOf(dzialaPoprzez);
		interpretuje.setInverseOf(jestInterpretowanyPrzez);
		jednoczy.setInverseOf(jestZjednoczonyPrzez);
		jestBeneficjentemDzialania.setInverseOf(maJakoBeneficjenta);
		jestCelemDzialania.setInverseOf(maJakoCelDzialania);
		jestCzesciaWlasciwa.setInverseOf(maJakoCzescWlasciwa);
		jestCzlonkiem.setInverseOf(maJakoCzlonka);
		jestInstrumentemWDzialaniu.setInverseOf(maJakoInstrumentDzialania);
		jestKlasyfikowanyPrzez.setInverseOf(klasyfikuje);
		jestLokalizacjaDzialania.setInverseOf(maJakoLokalizacjeDzialania);
		jestNormaOpisujaca.setInverseOf(podpadaPod);
		jestObiektemDzialania.setInverseOf(maJakoObiektDzialania);
		jestPodzielanaPrzez.setInverseOf(podziela);
		jestPojeciowoPokrywanyPrzez.setInverseOf(pojeciowoPokrywa);
		jestPonownieOpisywanaPrzez.setInverseOf(ponownieOpisuje);
		jestRealizowanyPrzez.setInverseOf(realizuje);
		jestSpecjalizowanyPrzez.setInverseOf(specjalizuje);
		jestSpelnionaPrzez.setInverseOf(spelnia);
		jestSposobemDzialania.setInverseOf(maJakoSposobDzialania);
		jestTworzonaPrzez.setInverseOf(tworzy);
		jestTworzonaPrzezIndywiduumJako.setInverseOf(stanowiUtworzonaPrzezIndywiduum);
		jestUogolniajacoZjednoczonyPrzez.setInverseOf(uogolniajacoJednoczy);
		jestUstanawianaPrzez.setInverseOf(ustanawia);
		jestWprowadzonyPrzez.setInverseOf(wprowadza);
		jestWykorzystaneW.setInverseOf(wykorzystuje);
		jestWynikiemDzialania.setInverseOf(maJakoWynikDzialania);
		jestWyrazonaPrzez.setInverseOf(wyraza);
		jestZawartyWZakresie.setInverseOf(zawieraWZakresie);
		jestZreifikowanaCzynnoscia.setInverseOf(maJakoZreifikowanaCzynnosc);
		maJakoOkresleniePrzejscia.setInverseOf(okreslaPrzejscie);
		okreslaKierunekDokad.setInverseOf(maJakoOkreslenieKierunkuDokad);
		okreslaKierunekSkad.setInverseOf(maJakoOkreslenieKierunkuSkad);
		podlegaWplywowi.setInverseOf(wplywaNa);
		posiadaWZakresie.setInverseOf(pozostajeWZakresie);
		powodujeZaistnienie.setInverseOf(zaistnialZPowodu);
		traktujeO.setInverseOf(znajdujeOdniesienieW);
		maJakoAgensa.setInverseOf(jestAgensem);
		jestGlownymCelem.setInverseOf(maJakoGlownyCel);
		jestPodrzednymCelem.setInverseOf(maJakoPodrzednyCel);
		jestPodrzednymPlanem.setInverseOf(maPodrzednyPlan);
		jestPrzyjmowanaPrzez.setInverseOf(przyjmuje);
		jestPrzyjmowanaPrzez.setInverseOf(przyjmujePlan);
		jestCelemPrzyjmowanymPrzez.setInverseOf(przyjmujeCel);
		jestPlanemPrzyjmowanymPrzez.setInverseOf(przyjmujePlan);
		jestStosowanaDo.setInverseOf(jestZastosowaniem);
		jestSkutkiemKonczonym.setInverseOf(maJakoSkutekKonczony);
		jestSkutkiemRozpoczynanym.setInverseOf(maJakoSkutekRozpoczynany);
		
		//Domain & Range
		charakteryzuje.setDomain(Pojecie);
		charakteryzuje.setRange(Zbior);
		definiuje.setDomain(Deskrypcja);
		definiuje.setRange(Pojecie);
		deleguje.setDomain(AgentSpoleczny);
		deleguje.setRange(Pojecie);
		dzialaNaRzecz.setDomain(Byt);
		dzialaNaRzecz.setRange(AgentSpoleczny);
		dzialaPoprzez.setDomain(AgentSpoleczny);
		dzialaPoprzez.setRange(Byt);
		interpretuje.setDomain(AgentSpoleczny);
		interpretuje.setRange(BytBazowy);
		jednoczy.setDomain(Deskrypcja);
		jednoczy.setRange(Zbior);
		jestBeneficjentemDzialania.setDomain(RolaPacjensaBeneficjenta);
		jestBeneficjentemDzialania.setRange(Zadanie);
		jestCelemDzialania.setDomain(Zadanie);
		jestCelemDzialania.setRange(Rola);
			maJakoAgensa.setDomain(Zadanie);
			maJakoAgensa.setRange(RolaAgentywna);
		jestCharakteryzowanyPrzez.setDomain(Zbior);
		jestCharakteryzowanyPrzez.setRange(Pojecie);
		jestCzesciaWlasciwa.setDomain(Byt);
		jestCzesciaWlasciwa.setRange(Byt);
			jestGlownymCelem.setDomain(Cel);
			jestGlownymCelem.setRange(Plan);
			jestPodrzednymCelem.setDomain(Cel);
			jestPodrzednymCelem.setRange(Cel);
			jestPodrzednymPlanem.setDomain(Plan);
			jestPodrzednymPlanem.setRange(Plan);
		jestCzlonkiem.setDomain(Byt);
		jestCzlonkiem.setRange(Zbior);
		jestDelegowanePrzez.setDomain(Pojecie);
		jestDelegowanePrzez.setRange(AgentSpoleczny);
		jestInstrumentemWDzialaniu.setDomain(RolaInstrumentalna);
		jestInstrumentemWDzialaniu.setRange(Zadanie);
		jestInterpretowanyPrzez.setDomain(BytBazowy);
		jestInterpretowanyPrzez.setRange(AgentSpoleczny);
		jestKlasyfikowanyPrzez.setDomain(Byt);
		jestKlasyfikowanyPrzez.setRange(Pojecie);
		jestLokalizacjaDzialania.setDomain(RolaLokacyjna);
		jestLokalizacjaDzialania.setRange(Zadanie);
		jestNormaOpisujaca.setDomain(Norma);
		jestNormaOpisujaca.setRange(WykonaniePlanu);
		jestObiektemDzialania.setDomain(RolaPacjensaObiektu);
		jestObiektemDzialania.setRange(Zadanie);
		jestPodzielanaPrzez.setDomain(Deskrypcja);
		jestPodzielanaPrzez.setRange(AgentSpoleczny);
			jestPrzyjmowanaPrzez.setDomain(AgentSpoleczny);
			jestPrzyjmowanaPrzez.setRange(Deskrypcja);
				jestCelemPrzyjmowanymPrzez.setDomain(Cel);
				jestCelemPrzyjmowanymPrzez.setRange(AgentSpoleczny);
				jestPlanemPrzyjmowanymPrzez.setDomain(Plan);
				jestPlanemPrzyjmowanymPrzez.setRange(AgentSpoleczny);
		jestPojeciowoPokrywanyPrzez.setDomain(Zbior);
		jestPojeciowoPokrywanyPrzez.setRange(Pojecie);
		jestPonownieOpisywanaPrzez.setDomain(Sytuacja);
		jestPonownieOpisywanaPrzez.setRange(AgentSpoleczny);
		jestRealizowanyPrzez.setDomain(ObiektInformacyjny);
		jestRealizowanyPrzez.setRange(RealizacjaInformacji);
		jestSpecjalizowanyPrzez.setDomain(BytSchematyczny);
		jestSpecjalizowanyPrzez.setRange(BytSchematyczny);
		jestSpelnionaPrzez.setDomain(Deskrypcja);
		jestSpelnionaPrzez.setRange(Sytuacja);
			jestStosowanaDo.setDomain(Norma);
			jestStosowanaDo.setRange(AplikacjaNormy);
		jestSposobemDzialania.setDomain(RolaSposobuWykonania);
		jestSposobemDzialania.setRange(Zadanie);
		jestTworzonaPrzez.setDomain(ReprezentacjaWewnetrzna);
		jestTworzonaPrzez.setRange(AgentFizyczny);
		jestTworzonaPrzezIndywiduumJako.setDomain(Deskrypcja);
		jestTworzonaPrzezIndywiduumJako.setRange(ReprezentacjaWewnetrzna);
		jestUogolniajacoZjednoczonyPrzez.setDomain(Byt);
		jestUogolniajacoZjednoczonyPrzez.setRange(Deskrypcja);
		jestUstanawianaPrzez.setDomain(Sytuacja);
		jestUstanawianaPrzez.setRange(Byt);
		jestWprowadzonyPrzez.setDomain(AgentSpoleczny);
		jestWprowadzonyPrzez.setRange(Deskrypcja);
		jestWykorzystaneW.setDomain(Pojecie);
		jestWykorzystaneW.setRange(Deskrypcja);
		jestWynikiemDzialania.setDomain(RolaWynikowa);
		jestWynikiemDzialania.setRange(Zadanie);
			jestSkutkiemKonczonym.setDomain(SkutekKonczonyWykonaniemZadania);
			jestSkutkiemKonczonym.setRange(Zadanie);
			jestSkutkiemRozpoczynanym.setDomain(SkutekRozpoczynanyWykonaniemZadania);
			jestSkutkiemRozpoczynanym.setRange(Zadanie);
		jestWyrazonaPrzez.setDomain(Deskrypcja);
		jestWyrazonaPrzez.setRange(ObiektInformacyjny);
		jestZawartyWZakresie.setDomain(Byt);
		jestZawartyWZakresie.setRange(Deskrypcja);
		jestZdefiniowaneW.setDomain(Pojecie);
		jestZdefiniowaneW.setRange(Deskrypcja);
		jestZjednoczonyPrzez.setDomain(Zbior);
		jestZjednoczonyPrzez.setRange(Deskrypcja);
		jestZreifikowanaCzynnoscia.setDomain(RolaReifikujaca);
		jestZreifikowanaCzynnoscia.setRange(Zadanie);
		klasyfikuje.setDomain(Pojecie);
		klasyfikuje.setRange(Byt);
		maJakoBeneficjenta.setDomain(Zadanie);
		maJakoBeneficjenta.setRange(RolaPacjensaBeneficjenta);
		maJakoCelDzialania.setDomain(Rola);
		maJakoCelDzialania.setRange(Zadanie);
			jestAgensem.setDomain(RolaAgentywna);
			jestAgensem.setRange(Zadanie);
		maJakoCzescWlasciwa.setDomain(Byt);
		maJakoCzescWlasciwa.setRange(Byt);
			maJakoGlownyCel.setDomain(Plan);
			maJakoGlownyCel.setRange(Cel);
			maJakoPodrzednyCel.setDomain(Cel);
			maJakoPodrzednyCel.setRange(Cel);
			maPodrzednyPlan.setDomain(Plan);
			maPodrzednyPlan.setRange(Plan);
		maJakoCzlonka.setDomain(Zbior);
		maJakoCzlonka.setRange(Byt);
		maJakoInstrumentDzialania.setDomain(Zadanie);
		maJakoInstrumentDzialania.setRange(RolaInstrumentalna);
		maJakoLokalizacjeDzialania.setDomain(Zadanie);
		maJakoLokalizacjeDzialania.setRange(RolaLokacyjna);
		maJakoObiektDzialania.setDomain(Zadanie);
		maJakoObiektDzialania.setRange(RolaPacjensaObiektu);
		maJakoOkreslenieKierunkuDokad.setDomain(Zadanie);
		maJakoOkreslenieKierunkuDokad.setRange(RolaAdlatywna);
		maJakoOkreslenieKierunkuSkad.setDomain(Zadanie);
		maJakoOkreslenieKierunkuSkad.setRange(RolaAblatywna);
		maJakoOkresleniePrzejscia.setDomain(Zadanie);
		maJakoOkresleniePrzejscia.setRange(RolaPerlatywna);
		maJakoSposobDzialania.setDomain(Zadanie);
		maJakoSposobDzialania.setRange(RolaSposobuWykonania);
		maJakoWynikDzialania.setDomain(Zadanie);
		maJakoWynikDzialania.setRange(RolaWynikowa);
			maJakoSkutekKonczony.setDomain(SkutekKonczonyWykonaniemZadania);
			maJakoSkutekKonczony.setRange(Zadanie);
			maJakoSkutekRozpoczynany.setDomain(SkutekRozpoczynanyWykonaniemZadania);
			maJakoSkutekRozpoczynany.setRange(Zadanie);
		maJakoZreifikowanaCzynnosc.setDomain(Zadanie);
		maJakoZreifikowanaCzynnosc.setRange(RolaReifikujaca);
		maPredyspozycjeDo.setDomain(Rola);
		maPredyspozycjeDo.setRange(Cel);
		okreslaKierunekDokad.setDomain(RolaAdlatywna);
		okreslaKierunekDokad.setRange(Zadanie);
		okreslaKierunekSkad.setDomain(RolaAblatywna);
		okreslaKierunekSkad.setRange(Zadanie);
		okreslaPrzejscie.setDomain(RolaPerlatywna);
		okreslaPrzejscie.setRange(Zadanie);
		podlegaWplywowi.setDomain(Cel);
		podlegaWplywowi.setRange(Cel);
		podpadaPod.setDomain(WykonaniePlanu);
		podpadaPod.setRange(Norma);
		podziela.setDomain(AgentSpoleczny);
		podziela.setRange(Deskrypcja);
			przyjmuje.setDomain(AgentSpoleczny);
			przyjmuje.setRange(Deskrypcja);
				przyjmujeCel.setDomain(AgentSpoleczny);
				przyjmujeCel.setRange(Cel);
				przyjmujePlan.setDomain(AgentSpoleczny);
				przyjmujePlan.setRange(Plan);
		pojeciowoPokrywa.setDomain(Pojecie);
		pojeciowoPokrywa.setRange(Zbior);
		ponownieOpisuje.setDomain(AgentSpoleczny);
		ponownieOpisuje.setRange(Sytuacja);
		posiadaWZakresie.setDomain(Sytuacja);
		posiadaWZakresie.setRange(Sytuacja);
		powodujeZaistnienie.setDomain(AgentSpoleczny);
		powodujeZaistnienie.setRange(KolektywIntencjonalny);
		pozostajeWZakresie.setDomain(Sytuacja);
		pozostajeWZakresie.setRange(Sytuacja);
		realizuje.setDomain(RealizacjaInformacji);
		realizuje.setRange(ObiektInformacyjny);
		specjalizuje.setDomain(BytSchematyczny);
		specjalizuje.setRange(BytSchematyczny);
		spelnia.setDomain(Sytuacja);
		spelnia.setRange(Deskrypcja);
			jestZastosowaniem.setDomain(AplikacjaNormy);
			jestZastosowaniem.setRange(Norma);
		stanowiUtworzonaPrzezIndywiduum.setDomain(ReprezentacjaWewnetrzna);
		stanowiUtworzonaPrzezIndywiduum.setRange(Deskrypcja);
		traktujeO.setDomain(ObiektInformacyjny);
		traktujeO.setRange(Byt);
		tworzy.setDomain(AgentFizyczny);
		tworzy.setRange(ReprezentacjaWewnetrzna);
		uogolniajacoJednoczy.setDomain(Deskrypcja);
		uogolniajacoJednoczy.setRange(Byt);
		ustanawia.setDomain(Byt);
		ustanawia.setRange(Sytuacja);
		wplywaNa.setDomain(Cel);
		wplywaNa.setRange(Cel);
		wprowadza.setDomain(Deskrypcja);
		wprowadza.setRange(AgentSpoleczny);
		wykorzystuje.setDomain(Deskrypcja);
		wykorzystuje.setRange(Pojecie);
		wyraza.setDomain(ObiektInformacyjny);
		wyraza.setRange(Deskrypcja);
		zaistnialZPowodu.setDomain(KolektywIntencjonalny);
		zaistnialZPowodu.setRange(AgentSpoleczny);
		zawieraWZakresie.setDomain(Deskrypcja);
		zawieraWZakresie.setRange(Byt);
		znajdujeOdniesienieW.setDomain(Byt);
		znajdujeOdniesienieW.setRange(ObiektInformacyjny);
	}
	
}
